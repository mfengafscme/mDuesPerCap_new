<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="compile"> 

<!--
****************************
                           *
CUSTOM TASKS               *
                           *
****************************
-->

   <!-- Declare the XDoclet task-->
   <taskdef classname="xdoclet.ejb.EjbDocletTask" classpath="lib/xdoclet.jar;lib/log4j-1.2.4.jar" name="ejbdoclet"/>
   <taskdef classname="xdoclet.web.WebDocletTask" classpath="lib/xdoclet.jar;lib/log4j-1.2.4.jar" name="webdoclet"/>

<!--
*********************************
                                *
ENVIRONMENT AND PROPERTY SETUP  *
                                *
*********************************
-->

   <!-- set global properties for this build -->
   <property name="app.name" value="mdues"/>
    <property environment="env"/>
	<property name="env.AFSCME_UNIT_TEST_URL" value="http://localhost:8080"/>

   <!-- Creates the directories necessary to the build -->
   <target name="init">
      <mkdir dir="build/classes"/>
      <mkdir dir="doc/api"/>
      <mkdir dir="gen"/>
      <mkdir dir="jspc/classes"/>
   </target>

   <!-- create a path reference for the compilation class path -->
   <path id="compile.class.path">
        <fileset dir="lib">
           <include name="**/*.jar"/>
        </fileset>
        <fileset dir="web/WEB-INF/lib">
           <include name="**/*.jar"/>
           <include name="**/*.zip"/>
        </fileset>
    </path>

   <!-- create a path reference for the jspc class path -->
   <path id="jspc.class.path">
        <path refid="compile.class.path"/>
        <pathelement location="build/classes"/>
    </path>
    
   <!-- create a path reference for the test class path -->
   <path id="test.class.path">
        <path refid="compile.class.path"/>
        <pathelement location="build/classes"/>
        <fileset dir="test/lib">
           <include name="**/*.jar"/>
        </fileset>
    </path>

<!--
*********************************
                                *
HOUSEKEEPING                    *
                                *
*********************************
-->

    <!-- Removes all the files generated by the build -->
    <target name="clean">
        <delete dir="build"/>
        <delete dir="web/WEB-INF/classes"/>
        <delete dir="doc/api"/>
        <delete dir="jspc"/>
		<delete>
			<fileset dir="dist">
				<include name="${app.name}.ear"/>
			</fileset>
			<fileset dir="install">
				<include name="eap*install.zip"/>
			</fileset>
		</delete>
        <delete dir="gen"/>
        <mkdir dir="build"/>
   </target>
   
    <!-- Runs the clean target here, and in the test project -->
    <target name="cleanAll">
		<ant target="cleanDeploy"/>
		<ant target="cleanJunk"/>
		<ant target="clean" dir="test"/>
        <ant target="clean"/>
        <ant target="cleanJMS"/>
   </target>

	<!-- cleans up ephemoral files created by development tools -->
    <target name="cleanJunk">
	<delete>
		<fileset dir="." defaultexcludes="no">
			<include name="**/*.keep"/>
			<include name="**/*.unloaded"/>
			<include name="**/*.checkedout"/>
			<include name="**/*.replaced"/>
			<include name="**/*.contrib"/>
			<include name="**/*.hijacked"/>
			<include name="**/*.merge"/>
			<include name="**/*~"/>
			<include name="**/*.swp"/>
			<include name="**/.nbattrs"/>
			<include name="**/junit*.properties"/>
		</fileset>
		<fileset dir="src">
			<include name="**/*.class"/>
		</fileset>
			
	</delete>
   </target>

	<!-- cleans JMS queues -->
    <target name="cleanJMS">
	<delete>
		<fileset dir="jboss/server/default/data/jbossmq/file">
			<include name="QUEUE*/*"/>
		</fileset>
	</delete>
   </target>


    <!-- Normalizes CRLF in the java source code -->
    <target name="fixCRLF">
        <fixcrlf srcDir="src" includes="**/*.java" eol="crlf"/>
    </target>

<!--
*********************************
                                *
VALIDATION                      *
                                *
*********************************
-->

   <!-- validates the XML files in the project -->
   <target name="validate">
		<xmlvalidate classpathref="compile.class.path" lenient="yes" warn="yes">
			<fileset dir="conf">
				<include name="*.xml"/>
				<exclude name="log_config.xml"/>
			</fileset>
			<fileset dir="web/WEB-INF">
				<include name="web.xml"/>
				<include name="afscme.tld"/>
			</fileset>
		</xmlvalidate>
	</target>

    <!-- Compiles all the JSP's.  This is only done to check for errors, the resulting java source and clas files are not used-->
   <target name="jspc" depends="init,compile">
        <jspc srcdir="web" destdir="jspc" verbose="3">
            <include name="**/*.jsp"/>
            <classpath refid="jspc.class.path"/>
        </jspc>
       <javac destdir="jspc/classes" deprecation="on">
           <src path="jspc"/>
           <classpath refid="jspc.class.path"/>
      </javac>
    </target>

<!--
*********************************
                                *
BUILD                           *
                                *
*********************************
-->

    <!-- Makes the EAR and Javadoc, and compiles the test code-->
    <target name="all">
        <ant target="ear"/>
		<ant dir="test"/>
        <ant target="doc"/>
    </target>

   
   <!-- Compiles all the source that has changed since the last compile -->
   <target name="compile" depends="init,ejbdoclet"> 
       <javac debug="true" destdir="build/classes" deprecation="on" listfiles="true">
           <src path="src"/>
           <src path="gen"/>
           <classpath refid="compile.class.path"/>
      </javac>
   </target>

   
   <!-- Creates a Web Application Archive of the project-->
   <target name="war" depends="compile,webdoclet,manifest">
       <jar jarfile="build/${app.name}.war">
           <zipfileset dir="build/classes" prefix="WEB-INF/classes">
               <include name="**/web/**"/>
           </zipfileset>
          <fileset dir="web">
				<exclude name="*.html"/>
				<exclude name="css/**"/>
				<exclude name="images/**"/>
				<exclude name="help/**"/>
				<exclude name="js/**"/>
			</fileset>
           <zipfileset dir="conf" prefix="WEB-INF/classes">
               <include name="messages.properties"/>
           </zipfileset>
           <zipfileset dir="gen" includes="struts-config.xml" prefix="WEB-INF"/>
        </jar>
   </target>

   <!-- Creates an ejb jar of the project EJB's-->
   <target name="ejbjar" depends="compile,manifest">
       <jar jarfile="build/${app.name}_ejb.jar" manifest="gen/manifest-ejb-ear.mf">
           <fileset dir="build/classes">
               <include name="**/ejb/**"/>
           </fileset>
           <zipfileset dir="gen" prefix="META-INF">
               <include name="ejb-jar.xml"/>
           </zipfileset>
        </jar>
   </target>

   <!-- Creates an Enterprise Application Archive -->
   <target name="ear" depends="war,ejbjar,utiljar,clientjar">
       <ear appxml="conf/application.xml" earfile="build/${app.name}.ear"> 
           <fileset dir="build">
               <include name="${app.name}.war"/>
               <include name="${app.name}_ejb.jar"/>
               <include name="${app.name}_util.jar"/>
           </fileset>
           <fileset dir="lib">
               <!-- INSERT 3RD PARTY JARS THAT ARE NEEDED AT RUNTIME HERE --> 
               <include name="fop.jar"/>
			   <include name="batik.jar"/>
			   <include name="avalon-framework*.jar"/>  
           </fileset>
           <fileset dir="gen">
               <include name="jboss.xml"/>
           </fileset>
       </ear>
   </target>

   <!-- Creates an jar of the dependent code -->
   <target name="utiljar" depends="compile,webdoclet">
       <jar jarfile="build/${app.name}_util.jar">
           <fileset dir="build/classes">
               <exclude name="**/web/**"/>
               <exclude name="**/ejb/**"/>
           </fileset>
           <fileset dir="conf">
               <include name="enterprise_config.xml"/>
               <include name="acl.xml"/>
               <include name="pdf_config.xml"/>
               <include name="label_config.xml"/>
               <include name="messages.properties"/>
			   <include name="log_config.xml"/>
           </fileset>

		   <!-- this is so config util can read in the actions and check them agains privileges -->
           <fileset dir="gen">
               <include name="struts-config.xml"/>
           </fileset>

        </jar>
   </target>

   <!-- Creates an jar of the dependent code -->
   <target name="clientjar" depends="compile">
       <jar jarfile="build/${app.name}_ejb_client.jar">
           <fileset dir="build/classes">
                <include name="**/ejb/**"/>
                <exclude name="**/ejb/**/*Bean.class"/>
                <include name="**/log/**"/>
           </fileset>
        </jar>
   </target>

<!--
*********************************
                                *
CODE GENERATION                 *
                                *
*********************************
-->

    <!-- Checks if the EJB source files are newer than the ejb-jar.xml file.  If not, the xdoclet task doesn't need to run-->
    <target name="checkEJBUpToDate">
        <uptodate property="ejbdoclet.notRequired" targetfile="gen/ejb-jar.xml">
            <srcfiles dir="src">
                <include name="**/ejb/*.java"/>
            </srcfiles>
        </uptodate>
    </target>

    <!-- Creates the Home and Component interfaces, and the ejb-jar.xml file -->
    <target name="ejbdoclet" depends="checkEJBUpToDate" unless="ejbdoclet.notRequired">
        <ejbdoclet classpathref="compile.class.path" destdir="gen" ejbspec="2.0" sourcePath="src;gen">
            <fileset dir="src">
                <include name="**/ejb/*.java"/>
            </fileset>
            <localinterface pattern="{0}"/>
            <localhomeinterface pattern="{0}Home"/>
            <deploymentdescriptor/>
            <jboss datasource="java:/oltp"/>
        </ejbdoclet>
    </target>

    <!-- Checks if thesource files for the webdoclet task are newer than the struts-config.xml file.-->
    <target name="checkWEBUpToDate">
        <uptodate property="webdoclet.notRequired" targetfile="gen/struts-config.xml">
            <srcfiles dir="src">
                <include name="**/web/*.java"/>
            </srcfiles>
            <srcfiles dir="conf">
                <include name="global-forwards.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <!-- Creates the struts-config.xml file -->
    <target name="webdoclet" depends="checkWEBUpToDate,ejbdoclet" unless="webdoclet.notRequired">
        <webdoclet classpathref="compile.class.path" destdir="gen" sourcePath="src;gen">
            <fileset dir="gen">
                <include name="**/ejb/*.java"/>
            </fileset>
            <fileset dir="src">
                <include name="**/web/*.java"/>
            </fileset>
            <strutsconfigxml mergedir="conf"/>
        </webdoclet>
    </target>
	
    <!-- Checks if the war manifest file needs to be updated-->
    <target name="manifestUpToDate">
        <condition property="manifest.upToDate">
            <and>
                <uptodate targetfile="gen/manifest-war-ear.mf">
                    <srcfiles dir="." includes="conf/manifest-war.mf"/>
                </uptodate>
                <uptodate targetfile="gen/manifest-ejb-ear.mf">
                    <srcfiles dir="." includes="conf/manifest-ejb.mf"/>
                </uptodate>
            </and>
        </condition>
    </target>

	<!-- Note: Putting jars into the EAR and referencing them from the manifest may 
	     now be unnecessary with JBoss (could probably just put them in server/lib),
		 but it's the correct J2EE way to do things, and it works. -->
   
    <!--Makes the war manifest file -->
    <target name="manifest" depends="manifestUpToDate" unless="manifest.upToDate">
    
        <copy file="conf/manifest-war.mf" tofile="gen/manifest-war-ear.mf"/>
        <replace file="gen/manifest-war-ear.mf" token="[basedir]" value=""/>
        <replace file="gen/manifest-war-ear.mf" token="[appname]" value="${app.name}"/>

        <copy file="conf/manifest-war.mf" tofile="gen/manifest-war-directory.mf"/>
        <replace file="gen/manifest-war-directory.mf" token="[basedir]" value="../"/>
        <replace file="gen/manifest-war-directory.mf" token="[appname]" value="${app.name}"/>

        <copy file="conf/manifest-ejb.mf" tofile="gen/manifest-ejb-ear.mf"/>
        <replace file="gen/manifest-ejb-ear.mf" token="[basedir]" value=""/>
        <replace file="gen/manifest-ejb-ear.mf" token="[appname]" value="${app.name}"/>

        <copy file="conf/manifest-ejb.mf" tofile="gen/manifest-ejb-directory.mf"/>
        <replace file="gen/manifest-ejb-directory.mf" token="[basedir]" value="../"/>
        <replace file="gen/manifest-ejb-directory.mf" token="[appname]" value="${app.name}"/>

    </target>


<!--
****************************
                           *
JBOSS					   *
                           *
****************************
-->


    <!-- Removes all deployed files-->
   <target name="cleanDeploy" depends="init">
        <delete dir="jboss/server/default/deploy/mdu/${app.name}.ear"/>
        <delete dir="jboss/server/default/deploy/AFSCMEEnterprise.ear"/>
        <delete dir="jboss/server/default/tmp"/>
        <delete dir="jboss/server/default/log"/>
        <delete dir="jboss/server/default/data/deployment-cache"/>
        <delete includeEmptyDirs="true">
			<fileset dir="jboss/server/default/data/jbossmq/file">
				<include name="**/QUEUE*/**"/>
			</fileset>
		</delete>
    </target>

    <!-- Starts the app.  Never returns.  Call 'stop' to stop it. -->
    <target name="start" depends="deploy">
        <ant target="runServer"/>
    </target>
	
    <!-- Stops the app. -->
    <target name="stop">
        <java classname="org.jboss.Shutdown" fork="true">
			<arg value="--shutdown"/>
            <classpath>
                <fileset dir="jboss/bin">
                    <include name="shutdown.jar"/>
                </fileset>
                <fileset dir="jboss/lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="jboss/server/default/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <!-- Starts the app, but doesn't deploy first. -->
    <target name="runServer" depends="init">
        <java classname="org.jboss.Main" dir="jboss/bin" fork="true">
			<sysproperty key="eap.nocluster" value="true"/>
            <classpath>
                <fileset dir="jboss/bin">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="jboss/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <!-- Like start but starts it in debug mode. -->
    <target name="startDebug" depends="deploy">
        <java classname="org.jboss.Main" dir="jboss/bin" fork="true">
			<sysproperty key="eap.nocluster" value="true"/> 
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Xrunjdwp:transport=dt_shmem,server=y,address=5000,suspend=n"/>
            <classpath>
                <fileset dir="jboss/bin">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="jboss/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </java>
	</target>


    <!-- Deploys the appliction, in exploded EAR format -->
   <target name="deploy" depends="ejbjar,utiljar,clientjar,webdoclet,compile,manifest,makeTest">
        
        <property name="jboss.deploy.dir" value="jboss/server/default/deploy/mdu/${app.name}.ear"/>
        
        <copy todir="${jboss.deploy.dir}/${app.name}.war">
              <fileset dir="web"/>
        </copy>

        <copy todir="${jboss.deploy.dir}/${app.name}.war/WEB-INF">
            <fileset dir="gen">
                <include name="struts-config.xml"/>
            </fileset>
        </copy>
        
       <copy todir="${jboss.deploy.dir}/${app.name}.war/WEB-INF/classes">
           <fileset dir="build/classes">
               <include name="**/web/**"/>
           </fileset>
           <fileset dir="conf">
               <include name="messages.properties"/>
           </fileset>
        </copy>

        <copy todir="${jboss.deploy.dir}">
            <fileset dir="build">
                <include name="${app.name}_util.jar"/>
                <include name="${app.name}_ejb_client.jar"/>
                <include name="${app.name}_ejb.jar"/>
            </fileset>
           <fileset dir="lib">
               <!-- INSERT 3RD PARTY JARS THAT ARE NEEDED AT RUNTIME HERE -->
			   <!--  Possibly not necesary with JBoss, could probably put these in server/lib,
			   		 but this way will work with any app server. -->
               <include name="fop.jar"/>
			   <include name="batik.jar"/>
			   <include name="avalon-framework*.jar"/> 
			   <include name="log4j-1.2.4.jar"/>
           </fileset>
		   
        </copy>

		<!-- deploy the test war -->
		<copy todir="${jboss.deploy.dir}/test.war">
			  <fileset dir="test/web"/>
		</copy>
       <copy todir="${jboss.deploy.dir}/test.war/WEB-INF/classes">
           <fileset dir="test/classes"/>
        </copy>
       <copy todir="${jboss.deploy.dir}/test.war/WEB-INF/lib">
           <fileset dir="test/lib">
		   		<include name="junit.jar"/>
			</fileset>
        </copy>
		
        <copy file="conf/application-with-test-war.xml" tofile="${jboss.deploy.dir}/META-INF/application.xml"/>
        <copy file="gen/manifest-war-directory.mf" tofile="${jboss.deploy.dir}/${app.name}.war/META-INF/Manifest.mf"/>
        <copy file="gen/jboss.xml" todir="${jboss.deploy.dir}"/>

    </target>

            
<!--
****************************
                           *
TESTING                    *
                           *
****************************
-->

    <target name="makeTest">
        <ant dir="test" target="war"/>
    </target>

   <target name="test" depends="deploy">
        <parallel>
            <ant target="start"/>
            <sequential>
                <echo message="Waiting for Server to be ready"/>
                <waitfor maxwait="10" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
                    <http url="${env.AFSCME_UNIT_TEST_URL}/test/ping.jsp"/>
                </waitfor>
                <ant dir="test" target="run"/>
                <ant target="stop"/>
                <ant dir="test" target="report"/>
            </sequential>
        </parallel>
   </target>

<!--
****************************
                           *
DAILY BUILD                *
                           *
****************************
-->

    <!-- Performs the daily build-->
    <target name="dailyBuild" depends="checkBuildNeeded" unless="build.notNeeded">
        <echo message="publish" file="publish"/> <!-- writing this file tells the dailyPublish task it needs to run -->
        <ant target="clean"/>
        <ant dir="test" target="clean"/>
        <ant target="ear"/>
        <ant target="test"/>
        <ant target="validate"/>
        <ant target="doc"/>
		<touch file="build/daily_build_stamp"/>
   </target>

    <!-- Copies the results of the daily build to a subdirectory of the 'dailyBuilds' folder -->
   <target name="dailyPublish" depends="checkPublishNeeded" if="publish.needed">
        <tstamp>
            <format property="build.date" pattern="MMMM dd, yyyy hh:mm aa"/>
            <format property="build.label" pattern="yyyy-MM-dd_HH.mm"/>
        </tstamp>

		<delete file="publish"/>

       <property name="output.dir" value="dailyBuilds/${build.label}"/>

       <mkdir dir="${output.dir}"/>

        <ant target="copyPrecompileDailyResults"/>
        <ant target="writeCompilationErrorMessage"/>
        <ant target="copyPostcompileDailyResults"/>
    </target>

    <!-- Sets the build.worked property if the EAR file was created -->
    <target name="checkBuildWorked">
       <available property="build.worked" file="build/${app.name}.ear"/>
   </target>

    <!-- Sets the publish.needed if a file called 'publish' exists-->
    <target name="checkPublishNeeded">
       <available property="publish.needed" file="publish"/>
   </target>

	<!-- Sets the test.needed property if the ear file is newer than the test results-->
	<target name="checkTestNeeded">
		<uptodate property="test.notNeeded" srcfile="build/${app.name}.ear" targetfile="test/report/html/index.html"/>
	</target>

	<!-- Sets the build.needed property if any of the files in the project are newer than the AFSCMEnterprise.ear file-->
	<target name="checkBuildNeeded">
		<uptodate property="build.notNeeded" targetfile="build/daily_build_stamp">
			<srcfiles dir= ".">
				<include name="src/**"/>
				<include name="lib/**"/>
				<include name="dist/**"/>
				<include name="web/**"/>
				<include name="conf/**"/>
				<include name="test/src/**"/>
				<include name="test/lib/**"/>
				<include name="test/web/**"/>
				<include name="build.xml"/>
				<include name="test/build.xml"/>
			</srcfiles>
		</uptodate>
	</target>

    <!-- Writes 'Compilation Errors' to the COMPILATION_ERRORS file, and makes dummy versions of
         other files not created beacuase compilation failed -->
   <target name="writeCompilationErrorMessage" depends="checkBuildWorked" unless="build.worked">
       <echo message="errors" file="${output.dir}/COMPILATION_ERRORS"/>
       <mkdir dir="${output.dir}/doc/api"/>
       <echo message="Unavailable due to Compilation Errors" file="${output.dir}/doc/api/index.html"/>
       <mkdir dir="${output.dir}/testReport"/>
       <echo message="Unavailable due to Compilation Errors" file="${output.dir}/testReport/index.html"/>
       <echo message="Unavailable due to Compilation Errors" file="${output.dir}/dbinstall.txt"/>
   </target>
        
    <!-- Copies the daily build results created during or before compilation (the log) -->
   <target name="copyPrecompileDailyResults">

       <echo message="${build.date}" file="${output.dir}/LABEL"/>
       <copy file="buildlog.txt" toDir="${output.dir}"/>
       <copy file="builderr.txt" toDir="${output.dir}"/>

        <copy file="dailyBuilds/single-build-index.html" tofile="${output.dir}/index.html"/>
        <copy file="dailyBuilds/single-build-menu.html" tofile="${output.dir}/menu.html"/>
        <replace file="${output.dir}/menu.html" token="[build.label]" value="${build.date}"/>
        <replace file="${output.dir}/menu.html" token="[dist.name]" value="${app.name}.zip"/>

        <copy file="doc/default.css" todir="${output.dir}/doc"/>

   </target>

    <!-- Copies the daily build results created after compilation, if the build worked-->
   <target name="copyPostcompileDailyResults" depends="checkBuildWorked" if="build.worked">

       <zip zipfile="${output.dir}/${app.name}.zip">
            <zipfileset dir="dist"/>
        </zip>

       <copy toDir="${output.dir}/testReport">
            <fileset dir="test/report/html"/>
        </copy>
       <copy file="dbinstall.txt" toDir="${output.dir}"/>
       <copy file = "test/report/SUMMARY" toDir="${output.dir}"/>

       <copy toDir="${output.dir}/doc">
            <fileset dir="doc"/>
        </copy>

    </target>


<!--
*********************************
                                *
JAVADOC                         *
                                *
*********************************
-->

   <!-- Generates Javadoc for the project -->
   <target name="doc" depends="init">
       <javadoc destDir="doc/api"
                packagenames="org.afscme.*"
                sourcepath="src;gen"
                stylesheetfile="doc/default.css">
          <classpath refid="compile.class.path"/>

          <link href="http://java.sun.com/j2se/1.4/docs/api/"/>
          <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>

          <doctitle><![CDATA[<h1>AFSCME Enterprise Application</h1>]]></doctitle>
          <bottom><![CDATA[<i>Copyright &#169; 2004 AFSCME.</i>]]></bottom>

          <group title="Framework" packages="org.afscme.enterprise.common*:org.afscme.enterprise.util*:org.afscme.enterprise.controller*:org.afscme.enterprise.log*"/>
          <group title="Administration" packages="org.afscme.enterprise.codes*:org.afscme.enterprise.users*:org.afscme.enterprise.roles*"/>
          <group title="Base Reporting" packages="org.afscme.enterprise.reporting.base*"/>

        </javadoc>
   </target>


   
<!--
*********************************
                                *
INSTALLATION					*
                                *
*********************************
-->

	<target name="install" depends="appInstall,webInstall,dbInstall, dmInstall"/>

	<target name="webInstall">
       <zip zipfile="install/eap_web_install.zip">
            <zipfileset dir="web" prefix="afscme/htdocs">
				<include name="css/**"/>
				<include name="images/**"/>
				<include name="help/**"/>
				<include name="js/**"/>
				<include name="*.html"/>
			</zipfileset>
            <zipfileset dir="jk" prefix="afscme/jk">
				<include name="*.conf"/>
				<include name="*.dll"/>
				<include name="*.properties"/>
			</zipfileset>
            <zipfileset dir="ssl" prefix="afscme/ssl">
				<include name="*.conf"/>
				<include name="*.exe"/>
				<include name="*.cnf"/>
				<include name="*.cmd"/>
				<include name="*.so"/>
				<include name="*.dll"/>
			</zipfileset>
        </zip>
	</target>

	<target name="dbInstall">
       <zip zipfile="install/eap_db_install.zip">
            <zipfileset dir="dist">
				<include name="*.sql"/>
				<include name="*.cmd"/>
			</zipfileset>
        </zip>
	</target>

	<target name="appInstall" depends="ear">
       <zip zipfile="install/eap_app_install.zip">
            <zipfileset dir="conf">
				<include name="mssql-ds.xml"/>
			</zipfileset>
            <zipfileset dir="build">
				<include name="${app.name}.ear"/>
				<include name="${app.name}_util.jar"/>
			</zipfileset>
            <zipfileset dir="install">
				<include name="msbase.jar"/>
				<include name="msutil.jar"/>
				<include name="mssqlserver.jar"/>
				<include name="RunApplyUpdate.bat"/>
			</zipfileset>
        </zip>
	</target>
	
	<target name="dmInstall">
		<zip zipfile="install/eap_db_migration.zip">
			<zipfileset dir="dist">
				<include name="*.sql"/>
				<include name="*.cmd"/>
				<include name="DM_DTS_Packages/*.dts"/>
				<include name="DM_Files/*.*"/>
				<include name="DM_Script_Files/*.sql"/>
			</zipfileset>
		</zip>
	</target>

</project>
